{"version":3,"sources":["component/PageAlert.js","component/PageBadge.js","component/PageBC.js","component/PageCard.js","App.js","serviceWorker.js","index.js"],"names":["PageAlert","Alert","variant","width","PageBadge","Button","Badge","ButtonGroup","src","alt","height","PageBC","Breadcrumb","Item","href","active","PageCard","Container","Row","Card","style","Img","Body","Title","Text","App","fluid","Col","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.da2bc426.chunk.js","sourcesContent":["import React from 'react';\nimport { Alert} from 'react-bootstrap';\n\nfunction PageAlert(){\n    return(\n        <Alert variant=\"primary\" width=\"25px\">Website React Bootstrap</Alert>\n    )\n}\nexport default PageAlert;","import React from 'react';\nimport { Badge, Button, ButtonGroup} from 'react-bootstrap';\n\nfunction PageBadge(){\n    return(\n        <div>\n            <Button variant=\"primary\">Notification <Badge variant=\"light\">9</Badge></Button>\n            <Button variant=\"primary\">Message <Badge variant=\"light\">19</Badge></Button>\n            <ButtonGroup>  \n            <Button variant=\"light\"> <img src=\"https://banner2.kisspng.com/20180420/kuq/kisspng-computer-icons-user-clip-art-my-vector-5ad9a348cd2ce1.8035052415242125528404.jpg\" alt=\". . .\" height=\"20px\"></img>Andreas</Button>\n            </ButtonGroup> \n        </div>\n    )\n}\nexport default PageBadge;\n\n","import React from 'react';\nimport { Breadcrumb} from 'react-bootstrap';\n\nfunction PageBC(){\n    return(\n        <div>\n            <Breadcrumb>\n                <Breadcrumb.Item href=\"#\">Home</Breadcrumb.Item>\n                <Breadcrumb.Item href=\"#\">\n                    Berita\n                </Breadcrumb.Item>\n                <Breadcrumb.Item active>Bola</Breadcrumb.Item>\n            </Breadcrumb>\n        </div>\n    )\n}\nexport default PageBC;","import React from 'react';\nimport { Card, Button, Container, Row} from 'react-bootstrap';\n\nfunction PageCard(){\n    return(\n        <div>\n        <Container>\n        <Row>\n            <Card style={{ width: '15rem' }}>\n                <Card.Img  src=\"https://images.performgroup.com/di/library/GOAL/f7/ad/diego-godin-vs-thailand_l9viaa2o7afh19gjl6vnekbgq.jpg\"/>\n                <Card.Body>\n                    <Card.Title><b>Diego Godin Ukir Rekor Spesial Lawan Thailand</b></Card.Title>\n                    <Card.Text>\n                        Some quick example text to build on the card title and make up the bulk of\n                        the card's content.\n                    </Card.Text>\n                    <Button variant=\"primary\">Read More</Button>\n                </Card.Body>\n            </Card>\n       \n            <Card style={{ width: '15rem' }}>\n                <Card.Img src=\"https://images.performgroup.com/di/library/GOAL/30/f0/neymar-psg-paris-saint-germain-2018-19_gmakk5891n9c19udcwofmrsgc.jpg\"/>\n                <Card.Body>\n                    <Card.Title><b>Neymar Bahas Kontrak Baru DI Paris Saint-Germain</b></Card.Title>\n                    <Card.Text>\n                        Some quick example text to build on the card title and make up the bulk of\n                        the card's content.\n                    </Card.Text>\n                    <Button variant=\"primary\">Go somewhere</Button>\n                </Card.Body>\n            </Card>\n        \n            <Card style={{ width: '15rem' }}>\n                <Card.Img src=\"https://images.performgroup.com/di/library/GOAL/f3/33/england-celebrate-vs-montenegro_e97kv5anpqlq1gr9nc2qaz4ko.jpg?t=-1232521935&\nquality=60&w=1600\"/>\n                <Card.Body>\n                    <Card.Title><b>Inggris Mau Jadi Tim Terbaik Di Dunia</b></Card.Title>\n                    <Card.Text>\n                        Some quick example text to build on the card title and make up the bulk of\n                        the card's content.\n                    </Card.Text>\n                    <Button variant=\"primary\">Go somewhere</Button>\n                </Card.Body>\n            </Card>\n\n            <Card style={{ width: '15rem' }}>\n                <Card.Img src=\"https://images.performgroup.com/di/library/GOAL/63/7f/sani-rizki-fauzi-indonesia-u-22_4yztc4nehkt61fa7omuyagf71.jpg?t=351764441&\nquality=60&w=1600\"/>\n                <Card.Body>\n                    <Card.Title><b>Sani Rizki Fauzi Tegaskan Mental Pemain Timnas U-23 Tetap Bagus</b></Card.Title>\n                    <Card.Text>\n                        Some quick example text to build on the card title and make up the bulk of\n                        the card's content.\n                    </Card.Text>\n                    <Button variant=\"primary\">Go somewhere</Button>\n                </Card.Body>\n            </Card>\n            </Row>\n        </Container>\n        </div>\n    )\n}\nexport default PageCard;\n\n\n","import React from 'react';\nimport { Container,Row, Col } from 'react-bootstrap';\nimport PageAlert from './component/PageAlert';\nimport PageBadge from './component/PageBadge';\nimport PageBC from './component/PageBC';\nimport PageCard from './component/PageCard';\n\nfunction App() {\n  return (\n    <div>\n      <Container fluid>\n        <Row>\n          <Col><PageAlert /></Col>\n          <Col></Col>          \n          <Col><PageBadge/> </Col>\n        </Row>\n        <Row>\n          <Col></Col>\n          <Col></Col><Col></Col>          \n          <Col><PageBC/> </Col>\n        </Row>\n      </Container> \n      <br /><PageCard />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}